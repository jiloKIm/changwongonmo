# -*- coding: utf-8 -*-
"""창원 길고양이의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z-QjWwepr48UXWUq1_TdBnpmmGgbfLXe
"""

import matplotlib.font_manager as fm
import os
import matplotlib.pyplot as plt

# apt-get : 패키지 설치 명령어
# -qq : 에러외의 메세지 숨기는 옵션키
!apt-get -qq install fonts-nanum


fe = fm.FontEntry(
    fname=r'/usr/share/fonts/truetype/nanum/NanumGothic.ttf', # ttf 파일이 저장되어 있는 경로
    name='NanumGothic')                        # 이 폰트의 원하는 이름 설정
fm.fontManager.ttflist.insert(0, fe)              # Matplotlib에 폰트 추가
plt.rcParams.update({'font.size': 10, 'font.family': 'NanumGothic'}) # 폰트 설정

import pandas as pd

# Try reading the file with 'cp949' encoding, which is commonly used for Korean in Windows
data = pd.read_csv('/content/CAT_LOCATION.csv', encoding='cp949')

# Display the first few rows of the dataset
data.head()

import folium

# Count the number of cats based on their neutering status
neutering_counts = data['중성화 여부'].value_counts()

neutering_counts
given_coords = (35.2287, 128.6818)

# Setting the given_coords to Changwon's coordinates
given_coords = (35.2287, 128.6818)

# Filter the data to only include rows within a 30km radius of the given coordinates
filtered_data_30km = data[data.apply(within_radius, axis=1)]

# Create a new map centered around the given coordinates
m_cluster = folium.Map(location=given_coords, zoom_start=20)

# Create a marker cluster
marker_cluster = MarkerCluster().add_to(m_cluster)

# Add the filtered cats' locations to the marker cluster
for idx, row in filtered_data_30km.iterrows():
    folium.Marker(
        location=[row['위도'], row['경도']],
        popup=row['중성화 여부'],

    ).add_to(marker_cluster)

m_cluster
m_cluster.save("의창구.html")

# Setting the given_coords to Changwon's coordinates
given_coords = (35.2585, 128.6648)

# Filter the data to only include rows within a 30km radius of the given coordinates
filtered_data_30km = data[data.apply(within_radius, axis=1)]

# Create a new map centered around the given coordinates
m_cluster = folium.Map(location=given_coords, zoom_start=20)

# Create a marker cluster
marker_cluster = MarkerCluster().add_to(m_cluster)

# Add the filtered cats' locations to the marker cluster
for idx, row in filtered_data_30km.iterrows():
    folium.Marker(
        location=[row['위도'], row['경도']],
        popup=row['중성화 여부'],

    ).add_to(marker_cluster)

m_cluster
m_cluster.save("성산구.html")

# Setting the given_coords to Changwon's coordinates
given_coords = ( 35.2139,  128.5872)

# Filter the data to only include rows within a 30km radius of the given coordinates
filtered_data_30km = data[data.apply(within_radius, axis=1)]

# Create a new map centered around the given coordinates
m_cluster = folium.Map(location=given_coords, zoom_start=20)

# Create a marker cluster
marker_cluster = MarkerCluster().add_to(m_cluster)

# Add the filtered cats' locations to the marker cluster
for idx, row in filtered_data_30km.iterrows():
    folium.Marker(
        location=[row['위도'], row['경도']],
        popup=row['중성화 여부'],

    ).add_to(marker_cluster)

m_cluster
m_cluster.save("회원구.html")

# Setting the given_coords to Changwon's coordinates
given_coords = (35.2048, 128.5683)

# Filter the data to only include rows within a 30km radius of the given coordinates
filtered_data_30km = data[data.apply(within_radius, axis=1)]

# Create a new map centered around the given coordinates
m_cluster = folium.Map(location=given_coords, zoom_start=20)

# Create a marker cluster
marker_cluster = MarkerCluster().add_to(m_cluster)

# Add the filtered cats' locations to the marker cluster
for idx, row in filtered_data_30km.iterrows():
    folium.Marker(
        location=[row['위도'], row['경도']],
        popup=row['중성화 여부'],

    ).add_to(marker_cluster)

m_cluster
m_cluster.save("합포구.html")

# Setting the given_coords to Changwon's coordinates
given_coords = (35.1582,  128.6992)

# Filter the data to only include rows within a 30km radius of the given coordinates
filtered_data_30km = data[data.apply(within_radius, axis=1)]

# Create a new map centered around the given coordinates
m_cluster = folium.Map(location=given_coords, zoom_start=20)

# Create a marker cluster
marker_cluster = MarkerCluster().add_to(m_cluster)

# Add the filtered cats' locations to the marker cluster
for idx, row in filtered_data_30km.iterrows():
    folium.Marker(
        location=[row['위도'], row['경도']],
        popup=row['중성화 여부'],

    ).add_to(marker_cluster)

m_cluster.save("진해구.html")

# Create a new map centered around the mean latitude and longitude values
m_circle = folium.Map(location=[data['위도'].mean(), data['경도'].mean()], zoom_start=10)

# Add circles for neutered cats
for idx, row in data[data['중성화 여부'] == 'O'].iterrows():
    folium.Circle(
        location=[row['위도'], row['경도']],
        radius=50,
        popup=row['중성화 여부'],
        color='blue',
        fill=True,
        fill_color='blue'
    ).add_to(m_circle)

m_circle

from folium.plugins import MarkerCluster

# Create a new map centered around the given coordinates
m_cluster = folium.Map(location=given_coords, zoom_start=10)

# Create a marker cluster
marker_cluster = MarkerCluster().add_to(m_cluster)

# Add the filtered cats' locations to the marker cluster
for idx, row in filtered_data_30km.iterrows():
    folium.Marker(
        location=[row['위도'], row['경도']],
        popup=row['중성화 여부'],
        icon=folium.Icon(color='blue')
    ).add_to(marker_cluster)

m_cluster

import geopandas as gpd# Reload the SHP file with the associated files
from geopy.distance import geodesic

gdf['cat_count'] = gdf.geometry.apply(lambda x: gdf_cats.within(x).sum())

def within_radius(row):
    point = (row['위도'], row['경도'])
    return geodesic(point, given_coords).km <= 30

# Function to check if a point is within 30km of the given coordinates
def within_radius(row):
    point = (row['위도'], row['경도'])
    return geodesic(point, given_coords).km <= 30

# Filter cats within 30km radius
filtered_cats = data[data.apply(within_radius, axis=1)]

# Calculate the number of cats within each administrative region

# Create map centered around the given coordinates
m_final = folium.Map(location=given_coords, zoom_start=10)

# Add the administrative regions to the map, colored based on the number of cats
folium.Choropleth(
    geo_data=gdf,
    data=gdf,
    columns=['EMD_CD', 'cat_count'],
    key_on='feature.properties.EMD_CD',
    fill_color='YlGn',
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name='Number of Cats'
).add_to(m_final)

m_final

# Take a subset of the data for testing
gdf_subset = gdf.iloc[:50]

# Create a test map
m_test = folium.Map(location=given_coords, zoom_start=10)

# Add the administrative regions to the test map, colored based on the number of cats
folium.Choropleth(
    geo_data=gdf_subset,
    data=gdf_subset,
    columns=['EMD_CD', 'cat_count'],
    key_on='feature.properties.EMD_CD',
    fill_color='YlGn',
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name='Number of Cats'
).add_to(m_test)

m_test

# Check the size of the geodataframe and the filtered cats data
gdf_size = gdf.memory_usage(deep=True).sum()
filtered_cats_size = filtered_cats.memory_usage(deep=True).sum()

gdf_size, filtered_cats_size

# Try creating the map again
m_retry = folium.Map(location=given_coords, zoom_start=10)

# Add the administrative regions to the map, colored based on the number of cats
folium.Choropleth(
    geo_data=gdf,
    data=gdf,
    columns=['cat_count'],
    key_on='feature.properties.EMD_CD',
    fill_color='YlGn',
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name='Number of Cats'
).add_to(m_retry)

m_retry

import pandas as pd

# Load the files and display the first 5 rows of each file
file_paths = [
    "/content/경상남도 창원시_길고양이 중성화 사업_20220926.csv",
   "/content/경상남도 창원시_동물등록 및 소유자 수 현황_20230601.csv",
    "/content/경상남도 창원시_등록동물 목록 현황_20230613.csv",
   "/content/경상남도 창원시_읍면동별 반려견 마리수 현황_20230628.csv"
]

# Load the "길고양이 중성화 사업" dataset
cat_data = pd.read_csv(file_paths[0], encoding="cp949")

# 1. 지역별 포획 및 중성화 현황
location_capture = cat_data['포획장소'].value_counts()
location_neutered = cat_data[cat_data['TNR'] == 'O']['포획장소'].value_counts()
location_neutered_ratio = (location_neutered / location_capture).sort_values(ascending=False)

# 2. 고양이 특성별 중성화 현황
color_capture = cat_data['색상'].value_counts()
color_neutered = cat_data[cat_data['TNR'] == 'O']['색상'].value_counts()
color_neutered_ratio = (color_neutered / color_capture).sort_values(ascending=False)

# 3. 포획 장소 패턴 분석 (Given patterns: '아파트', '공원', '시장', '학교')
capture_patterns = ['아파트', '공원', '시장', '학교']
pattern_counts = {pattern: cat_data['포획장소'].str.contains(pattern).sum() for pattern in capture_patterns}

# 4. 시간별 포획 현황
cat_data['포획일시'] = pd.to_datetime(cat_data['포획일시'])
yearly_capture = cat_data['포획일시'].dt.year.value_counts()
monthly_capture = cat_data['포획일시'].dt.month.value_counts()
weekday_capture = cat_data['포획일시'].dt.weekday.value_counts()

location_capture.head(), location_neutered_ratio.head(), color_capture.head(), color_neutered_ratio.head(), pattern_counts, yearly_capture, monthly_capture, weekday_capture

# 1. 지역별 동물 관련 현황 분석

# 길고양이 포획 수
cat_capture_counts = cat_data['포획장소'].str.split(' ', expand=True)[2].value_counts()

# 중성화된 고양이의 비율
neutered_cats = cat_data[cat_data['TNR'] == 'O']['포획장소'].str.split(' ', expand=True)[2].value_counts()
 = (neutered_cats / cat_capture_counts).fillna(0)


# Combine the data again
regional_animal_status = pd.DataFrame({
    '길고양이 포획 수': cat_capture_counts,
    '중성화된 고양이 비율': neutered_ratio,
}).fillna(0)

regional_animal_status.head()

# Extract top 20 regions for each category
cat_capture_by_eupmyeondong = cat_data['읍면동_only'].value_counts().nlargest(20)


# Set up the figure and axes
fig, ax = plt.subplots(2, 2, figsize=(20, 12))

# Bar chart for top 20 길고양이 포획 수
cat_capture_by_eupmyeondong .plot(kind='bar', ax=ax[0, 0], color='skyblue', alpha=0.8)
ax[0, 0].set_title('Top 20 읍면동별 길고양이 포획 수')
ax[0, 0].set_ylabel('포획 수')
ax[0, 0].tick_params(axis='x', rotation=45)

# Bar chart for top 20 중성화된 고양이 비율
(top_neutered_ratio[:20] * 100).plot(kind='bar', ax=ax[0, 1], color='lightgreen', alpha=0.8)
ax[0, 1].set_title('Top 20 지역별 중성화된 고양이 비율 (%)')
ax[0, 1].set_ylabel('비율 (%)')
ax[0, 1].tick_params(axis='x', rotation=45)


# Adjust layout
plt.tight_layout()
plt.show()

# 2. 동물 특성별 중성화 현황

# 고양이의 나이, 체중, 색상 별 중성화 현황
age_neutered_ratio = cat_data[cat_data['TNR'] == 'O']['나이'].value_counts() / cat_data['나이'].value_counts()
weight_neutered_ratio = cat_data[cat_data['TNR'] == 'O']['체중'].value_counts() / cat_data['체중'].value_counts()
color_neutered_ratio = cat_data[cat_data['TNR'] == 'O']['색상'].value_counts() / cat_data['색상'].value_counts()

age_neutered_ratio.fillna(0, inplace=True)
weight_neutered_ratio.fillna(0, inplace=True)
color_neutered_ratio.fillna(0, inplace=True)

age_neutered_ratio, weight_neutered_ratio, color_neutered_ratio

"""지역별 동물 현황 시각화 도구:"""

import matplotlib.pyplot as plt
import seaborn as sns

top_20_areas = cat_capture_counts.sort_values(ascending=False).head(20).index

# Filter the data for top 20 areas
top_20_cat_captures = cat_capture_counts[top_20_areas]
top_neutered_ratio = neutered_ratio[top_20_areas] * 100  # Convert to percentage

cat_data['읍면동_only'] = cat_data['포획장소'].str.split(' ').str[0]
top_neutered_ratio['읍면동_only'] = cat_data['포획장소'].str.split(' ').str[0]

top_neutered_ratio

# 필요한 라이브러리 불러오기
import pandas as pd
import matplotlib.pyplot as plt

# 데이터 불러오기
file_path = "/content/경상남도 창원시_길고양이 중성화 사업_20220926.csv"  # 실제 경로로 바꿔주세요!
cat_data = pd.read_csv(file_path, encoding="cp949")

# '읍면동_only' column 생성하기
cat_data['읍면동_only'] = cat_data['포획장소'].str.extract(r'(\w*읍|\w*면|\w*동)')

# 하위 20위 지역 추출
cat_capture_by_eupmyeondong_bottom = cat_data['읍면동_only'].value_counts().nsmallest(20)

# 바 차트로 시각화
plt.figure(figsize=(12, 8))
cat_capture_by_eupmyeondong_bottom.pop("3동")
cat_capture_by_eupmyeondong_bottom.pop("닭한마리우동")
cat_capture_by_eupmyeondong_bottom.pop("동")
cat_capture_by_eupmyeondong_bottom.pop("읍")
cat_capture_by_eupmyeondong_bottom.plot(kind='bar', color='skyblue', alpha=0.8)
plt.title('Bottom 20 읍면동별 길고양이 포획 수')
plt.ylabel('포획 수')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import pandas as pd
from sklearn.tree import DecisionTreeClassifier, plot_tree
import matplotlib.pyplot as plt

# Re-load the data
cat_data = pd.read_csv("/content/경상남도 창원시_길고양이 중성화 사업_20220926.csv", encoding="cp949")

# Extracting the '읍면동_only' column
cat_data['읍면동_only'] = cat_data['포획장소'].str.extract(r'(\w*읍|\w*면|\w*동)')

# Dropping rows with NaN values in '읍면동_only'
cat_data = cat_data.dropna(subset=['읍면동_only'])

# Preparing the data for training
X = pd.get_dummies(cat_data.drop(['읍면동_only', '포획장소'], axis=1))  # Using all other features as input
y = cat_data['읍면동_only']

# Initialize and train decision tree
clf = DecisionTreeClassifier(max_depth=5)  # Setting max depth to 5 for visualization purposes
clf.fit(X, y)

# Plotting the decision tree
plt.figure(figsize=(20, 10))
plot_tree(clf, feature_names=X.columns, class_names=clf.classes_, filled=True, rounded=True, fontsize=10)
plt.show()

cat_capture_by_eupmyeondong_bottom

print("Top 20 읍면동별 길고양이 포획 수",cat_capture_by_eupmyeondong,'Top 20 지역별 중성화된 고양이 비율 (%)',
      top_neutered_ratio,
     'Top 20 지역별 반려견 마리수', top_dog_counts,
      '지역별 동물',top_animal_registration)

import numpy as np

from collections import Counter
from wordcloud import WordCloud

# Extract the capture location data
capture_locations = cat_data['포획장소'].dropna().tolist()

# Split the locations into individual words and count their occurrences
words = []
for location in capture_locations:
    words.extend(location.split())

word_counts = Counter(words)
del word_counts["부근"]

for i in range(0,10000):

  del word_counts[f"{i}"]
  del word_counts[f"{i} 길"]
  del word_counts[f"{i}길"]
  del word_counts[f"{i}번길"]
# Generate a word cloud for visualization
wordcloud = WordCloud(width=800, height=400, background_color='white', font_path='/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf').generate_from_frequencies(word_counts)

plt.figure(figsize=(10, 6))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title("포획 장소 키워드 워드클라우드")
plt.show()

DICT={'동정동': 6,
         '흥한웰가아파트': 1,
         '후문': 9,
         '의안로': 14,
         '4-2': 2,
         '오성아파트': 2,
         '노인정': 2,
         '북면': 32,
         '월촌리': 4,
         '소답동': 10,
         '64-2': 2,
         '읍성로': 2,
         '12-10': 1,
         '115-20': 2,
         '창원초등학교': 1,
         '내': 28,
         '감계힐스테이드': 2,
         '4차': 2,
         '413동': 2,
         '외산로': 1,
         '368-51': 1,
         '귀곡동': 1,
         '삼귀로': 4,
         '193-5': 1,
         '대원동': 9,
         '대원로': 1,
         '중앙동': 3,
         '중앙대로': 1,
         '40-9': 2,
         '내동': 1,
         '효성중공업': 1,
         '1공장': 1,
         '상남동': 1,
         '상남꿈에그린아파트': 1,
         '102동': 6,
         '가음동': 1,
         '태주아파트': 1,
         '뒷편': 18,
         '신월동': 1,
         '신월로': 1,
         '창원천로': 5,
         '원이대로': 1,
         '적현로': 4,
         '외동반림로': 14,
         '두산볼보로': 5,
         '귀산로': 6,
         '충혼로': 2,
         '16-9': 1,
         '창이대로': 2,
         '7-1': 1,
         '258번길11': 1,
         '용지로': 6,
         '5-20': 2,
         '외산리': 1,
         '368-5': 1,
         '10-5': 2,
         '흥한웰가': 1,
         '920-2': 2,
         '구룡로': 8,
         '평산로': 1,
         '팔용동': 17,
         '벽산블루밍': 5,
         '104동': 11,
         '뒤편': 8,
         '팔용로': 3,
         '남산로': 2,
         '차룡단지로': 3,
         '과학고등학교': 3,
         '극동아파트': 4,
         '상가': 5,
         '화단': 10,
         '중동': 10,
         '유니시티': 9,
         '1단지': 2,
         '113동': 1,
         '대동중앙아파트': 1,
         '5-6라인': 1,
         '사림동': 16,
         '16-3': 5,
         '도계동': 10,
         '대패생각': 3,
         '뒤': 11,
         '마루어린이': 3,
         '공원': 16,
         '대동다숲아파트': 1,
         '관리실': 1,
         'A동': 2,
         '103동': 5,
         '옆': 8,
         '팔용평생교육센타': 2,
         '106동': 8,
         '쿠팡캠프': 1,
         '101동': 7,
         '3단지': 2,
         '놀이터': 4,
         '소망어린이': 1,
         '사화로': 3,
         '연월커피': 1,
         '맞은편': 1,
         '경비실': 1,
         '302동': 1,
         '2단지': 3,
         '맘스카페': 3,
         '창원대학교': 11,
         '종합': 5,
         '쓰레기장': 7,
         '창창원대학교': 1,
         '기숙사': 4,
         '3호관': 1,
         '동아리방': 1,
         '514호관': 1,
         '종합쓰레기장': 1,
         '3동': 1,
         '인공폭포': 1,
         '명지로': 14,
         '동읍': 22,
         '자여로': 9,
         '명서동': 13,
         '58-10': 1,
         '1차': 9,
         '112동': 2,
         '111-2': 1,
         '앞': 11,
         '금강빌라': 1,
         '124-13': 1,
         '69-9': 3,
         '3단진': 1,
         '상강한주맨션': 2,
         '주차장': 10,
         '58-1': 3,
         '2-1': 5,
         '화양길': 4,
         '50-36': 4,
         '143-2': 1,
         '111-3': 3,
         '명도초등학교': 2,
         '의창노인복지관': 3,
         '85-4': 1,
         '395-2': 1,
         '국화공원': 1,
         '명서로': 1,
         '18-23': 1,
         '350-1': 2,
         '사림로': 10,
         '16-8': 2,
         '봉곡동': 4,
         '61-5': 4,
         '코오롱': 1,
         '아파트': 8,
         '봉림동': 3,
         '산': 3,
         '146-1': 3,
         '성산동': 1,
         '동환산업': 1,
         '41-7': 2,
         '86-7': 2,
         '공룡어린이': 1,
         '코오롱아파트': 3,
         '10-8': 8,
         '87-7': 1,
         '19-14': 1,
         '16-7': 1,
         '천주로': 7,
         '46-6': 3,
         '감계리': 4,
         '271-5': 1,
         '향교': 2,
         '소계로': 4,
         '21-1': 4,
         '중앙천로': 2,
         '감계로': 1,
         '53-14': 1,
         '구룡사': 4,
         '143-33': 1,
         '게이트볼장': 2,
         '동전월드메르디앙': 2,
         '108동': 2,
         '횟집': 1,
         '감계에코프리미움': 3,
         '2차': 3,
         '202동': 3,
         '544-20': 1,
         '내곡리': 3,
         '시립요양병원': 3,
         '20부근': 5,
         '무릉산길': 3,
         '29-6': 1,
         '두대동': 2,
         '270-2': 2,
         '시티세븐자이아파트': 1,
         '주남로': 7,
         '5-6': 9,
         '앰배서더': 3,
         '반림동': 7,
         '럭키아파트': 6,
         '11동': 6,
         '용남길': 3,
         '97-8': 2,
         '무성길': 4,
         '8-1': 3,
         '105-8': 2,
         '무성리': 1,
         '우성아파트': 1,
         '가동': 1,
         '문성대학교': 5,
         '반리동': 1,
         '진산대로': 6,
         '66-4': 1,
         '소각장': 3,
         '9동': 1,
         '두대로': 2,
         '더시티세븐': 1,
         '자이아파트': 1,
         '더시티세븐자이아파트': 1,
         '87-8': 1,
         '50-17': 3,
         '반송공원': 2,
         '진전파출소': 2,
         '진전면': 42,
         '회진로': 1,
         '진북면': 11,
         '서북동길': 5,
         '9부근': 2,
         '미천2길': 1,
         '진종초등학교': 1,
         '체육관': 1,
         '금암길': 1,
         '285-25': 1,
         '회성동': 2,
         '444-19': 2,
         '안성로': 20,
         '15-3': 9,
         '삼계9길': 1,
         '49-1': 1,
         '안계리': 3,
         '숲속로': 17,
         '북성로': 5,
         '중리상곡로': 1,
         '20-1': 1,
         '호계리': 1,
         '71-1': 1,
         '감천리': 3,
         '호원로': 17,
         '양덕북12길': 1,
         '삼계리': 1,
         '1번지': 1,
         '내서': 1,
         '현대아파트': 1,
         '광려로': 7,
         '회성북1길': 1,
         '두척1길': 2,
         '곡안': 4,
         '55-50': 4,
         '율림교로': 2,
         '구산면': 48,
         '옥계로': 17,
         '서동로': 2,
         '41-140': 2,
         '대실로': 4,
         '147-1': 2,
         '평암로': 2,
         '451-12': 2,
         '탑동길': 17,
         '이명': 3,
         '양덕동': 9,
         '974-21': 1,
         '월안': 2,
         '지산': 1,
         '139-190': 1,
         '자유무역': 5,
         '미천': 1,
         '봉암공단': 10,
         '상궁두미길': 1,
         '허당로': 2,
         '41-24': 1,
         '서원곡': 11,
         '씨름장': 5,
         '현동': 54,
         '가포로': 4,
         '교방동': 7,
         '무학자이아파트': 5,
         '합성동': 10,
         '금강로': 7,
         '문화서': 4,
         '76-4': 1,
         '두척': 17,
         '회원남로': 2,
         '회원천북길': 22,
         '중흥3차아파트': 2,
         '312동': 2,
         '어시장': 9,
         '과일나라가게': 1,
         '내추길': 3,
         '105동': 6,
         '월영서': 11,
         '1-14': 4,
         '윗용호길': 3,
         '욱곡1길': 5,
         '3-24': 5,
         '구암북': 10,
         '비행장가든': 4,
         '302-47': 10,
         '회원천남길': 8,
         '회원남': 18,
         '32부근': 1,
         '6부근': 2,
         'lh아파트': 3,
         '432-1': 2,
         '그린품애아파트': 4,
         '611동': 6,
         '월영마을로': 1,
         '진동면': 87,
         '한일아파트': 3,
         '109동': 2,
         '밑': 6,
         '신서촌': 6,
         '10-4': 4,
         '신화아파트': 16,
         '정문': 13,
         '산호북19길': 1,
         '삼계화성아파트': 1,
         '양덕북': 9,
         '회성북': 7,
         '70-16': 1,
         '중리공단로': 5,
         '호계본동로': 2,
         '합성옛길': 9,
         '29-2': 1,
         '구암남': 7,
         '중리': 1,
         '공단로': 1,
         '길': 1,
         '합성남': 1,
         '회성시장': 7,
         '상곡로': 2,
         '회성남': 17,
         '구암서': 2,
         '69-1': 1,
         '한일유앤아이아파트': 6,
         '110동': 3,
         '건우아파트': 2,
         '302-85': 6,
         '서촌숲끝길': 2,
         '협성아파트': 3,
         '상남시장로': 2,
         '신서촌로': 4,
         '동부교회': 3,
         '가포해안변공원': 8,
         '해양관광로': 4,
         '안녕로': 3,
         '다구2길': 1,
         '장미아파트': 9,
         'C동': 9,
         '산호북': 2,
         '완월북': 3,
         '배진아파트': 1,
         '석전북': 2,
         '덕동북길': 5,
         '65부근': 2,
         '합포동': 4,
         '21부근': 1,
         '15-12': 1,
         '명주길': 2,
         '예곡길': 1,
         '217-75': 1,
         '요장해안길': 2,
         '59-14': 2,
         '가포해안길': 12,
         '89-28': 10,
         '81부근': 2,
         '성호서': 2,
         '동촌길': 1,
         '157부근': 1,
         '광암1길': 1,
         '107부근': 1,
         '롯데캐슬아파트': 2,
         '광암빌라': 2,
         '옥계리': 6,
         '방파제': 1,
         '441부근': 1,
         '상록아파트': 1,
         '오동동': 3,
         '33부근': 3,
         '무학로': 1,
         '서원고': 1,
         '원각사': 1,
         '회원동': 5,
         '60-4': 1,
         '서성로': 1,
         '23부근': 3,
         '35부근': 1,
         '명주': 2,
         '성호횟집': 2,
         '옥계안길': 2,
         '산호동': 14,
         '국제비치아파트': 8,
         '1부근': 1,
         '40-12': 1,
         '옥동로': 6,
         '17-9': 1,
         '7부근': 1,
         '마하사': 2,
         '34부근': 1,
         '산호시장길': 4,
         '3부근': 2,
         '국제비치': 1,
         '60-11': 2,
         '14-1': 12,
         '해운동': 1,
         '45-10': 1,
         '봉덕': 2,
         '산호남': 2,
         '복성로': 1,
         '임곡리': 5,
         '142-2': 5,
         '34-20': 2,
         '봉양로': 2,
         '송평로': 2,
         '18-37': 1,
         '무역로': 8,
         '양덕남': 3,
         '평성': 11,
         '양덕초등학교': 1,
         '37부근': 2,
         '439부근': 1,
         '66-3부근': 1,
         '178부근': 2,
         '노산북': 1,
         '자산서': 1,
         '58부근': 1,
         '29부근': 1,
         '창녕횟집': 1,
         '24-1': 3,
         '노산서': 6,
         '80부근': 1,
         '팔의사로': 2,
         '105부근': 2,
         '자산남': 2,
         '8부근': 2,
         '941부근': 2,
         '남성동': 1,
         '회센터': 1,
         '28-1': 1,
         '합포서': 1,
         '24-1부근': 1,
         '구암동': 1,
         '3.15공원': 1,
         '입구': 1,
         '6갈': 1,
         '19부근': 1,
         '교방동산': 1,
         '41-12': 1,
         '106-43': 1,
         '교방시장': 1,
         '해안대로': 1,
         '합성시장길': 2,
         '30-2': 2,
         '55부근': 1,
         '1-14부근': 1,
         '수산1길': 1,
         '89부근': 1,
         '중앙북': 3,
         '월영서7길': 1,
         '회원북': 1,
         'LH아파트': 5,
         '가포순환로': 2,
         '137부근': 1,
         '중흥아파트': 1,
         '상공회원소': 3,
         '경동리인아파트': 2,
         '하늘숲': 2,
         '어린이집': 2,
         '그린품애': 2,
         '합성북': 2,
         '53-2': 4,
         '내서읍': 17,
         '두곡길': 6,
         '30-13': 6,
         '한주아파트': 1,
         '석전동': 2,
         '무학아파트': 3,
         '봉암로': 1,
         '두철': 2,
         '359(방사': 1,
         '동영상': 1,
         '파일': 1,
         '별도보관)': 1,
         '21-14부근': 1,
         '문화북': 1,
         '코오롱하늘채아파트': 3,
         '현동8길': 1,
         '31부근': 1,
         '중흥1차아파트': 1,
         '문화남': 2,
         '해안가': 4,
         '다구리': 5,
         '414-2': 2,
         '오산2길': 6,
         '위': 3,
         '111동': 1,
         '231부근': 5,
         '40-4': 1,
         '다구': 2,
         '292-24': 2,
         '292-24부근': 2,
         '한일유앤아이파트': 3,
         '교원동': 3,
         '탑동기': 1,
         '14부근': 3,
         '가포': 1,
         '닭한마리우동': 1,
         '옥계초등': 2,
         '302-85부근': 1,
         '근곡1길': 1,
         '214-11부근': 1,
         '이순신로': 2,
         '188-162부근': 1,
         '삼진의거대로': 2,
         '삼지의거대로': 1,
         '입곡마을': 8,
         '회관': 8,
         '근곡': 1,
         '214-11': 1,
         '449부근': 1,
         '오산': 1,
         '188-162': 1,
         '메코빌': 1,
         '진저면': 1,
         '인곡마을회관': 4,
         '합포남': 1,
         '용원동': 6,
         '용원어시장': 3,
         '재': 3,
         '명동': 8,
         '명제로': 2,
         '30-9': 2,
         '웅천동': 7,
         '농업기술센터': 1,
         '이동': 7,
         '충장로': 12,
         '풍호동': 7,
         '풍호한림아파트': 4,
         '남양동': 3,
         '월남로': 2,
         '31-7': 3,
         '충당로': 1,
         '11-19': 1,
         '장천동': 13,
         '대동대숲아파트': 4,
         '여좌동': 2,
         '여좌로': 2,
         '장천초등학교': 2,
         '남문동': 7,
         '리젠시빌란트': 1,
         '안골동': 7,
         '안성마을회관': 3,
         '풍호호마트': 1,
         '신성장원': 1,
         '청정횟집': 1,
         '죽곡동': 3,
         '144-5': 3,
         '190-1': 1,
         '월안로': 1,
         '진해기지': 18,
         '사령부': 18,
         '마천동': 10,
         '21-6': 3,
         '다리밑': 2,
         '마천로': 7,
         '12-1': 7,
         '부영3차': 3,
         '311동': 3,
         '웅천로': 5,
         '안골로': 1,
         '1190-1': 1,
         '신항광역': 2,
         '파출소': 2,
         '웅동2동': 2,
         '해인로즈빌a': 2,
         '107동': 2,
         '1190-3': 3,
         '다리': 5,
         '어은동': 1,
         '어은로': 1,
         '19-2': 1,
         '성내동': 2,
         '301-6': 1,
         '우성기계': 1,
         '6-15': 2,
         '1190-6': 2,
         '대죽동': 7,
         '44-9': 7,
         '영진모터스': 7,
         '경화동': 6,
         '조천북로': 5,
         '131부근': 1,
         '풍호공원': 1,
         '진해기지사령부': 4,
         '자은로': 2,
         '동진로': 1,
         '신항동로': 1,
         '부영아파트': 1,
         '812동': 1,
         '뒷': 1,
         '태백동': 6,
         '중초로': 3,
         '태백서로': 2,
         '144-6': 1,
         '여좌천로': 2,
         '346번지': 6,
         '할매칼국수': 6,
         '석동': 14,
         '석동로': 7,
         '16-6': 7,
         '자은동': 4,
         '냉천로': 1,
         '68-1': 1,
         '석동주공아파트': 2,
         '돌리로': 5,
         '8-6': 5,
         '37-8': 1,
         '냉천북로': 2,
         '622-9': 1,
         '6-3': 1,
         '진해대로': 1 }

for i,j in DICT.items():
  if(j>10):
    print(i,j)

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, classification_report

# Prepare the data
cat_data_clean = cat_data.dropna(subset=['나이', '체중', '색상', 'TNR'])

# Convert features to numerical format
label_encoders = {}
for column in ['나이', '색상']:
    le = LabelEncoder()
    cat_data_clean[column] = le.fit_transform(cat_data_clean[column])
    label_encoders[column] = le

# Target variable: whether the cat is neutered or not
y = cat_data_clean['TNR'].map({'O': 1, 'X': 0})

# Features
X = cat_data_clean[['나이', '체중', '색상']]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
clf = RandomForestClassifier(random_state=42)
clf.fit(X_train, y_train)

# Predict on test set
y_pred = clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

accuracy, classification_rep

from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

# Extracting relevant features
cluster_data = cat_data_clean[['나이', '체중', '색상']]

# Scaling the features
scaler = StandardScaler()
scaled_data = scaler.fit_transform(cluster_data)

# Applying KMeans clustering
kmeans = KMeans(n_clusters=3, random_state=42)
clusters = kmeans.fit_predict(scaled_data)

# Applying PCA for visualization
pca = PCA(n_components=2)
pca_result = pca.fit_transform(scaled_data)

# Plotting the clusters
plt.figure(figsize=(10, 7))
scatter = plt.scatter(pca_result[:, 0], pca_result[:, 1], c=clusters, cmap='viridis', alpha=0.6)
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title('KMeans Clustering of Cats')
plt.colorbar(scatter)
plt.grid(True)
plt.show()

# Extracting cluster centroids
centroids = scaler.inverse_transform(kmeans.cluster_centers_)

# Convert centroids to DataFrame for better visualization
centroids_df = pd.DataFrame(centroids, columns=['나이', '체중', '색상'])
centroids_df['색상'] = centroids_df['색상'].round(0).astype(int)
centroids_df['색상'] = centroids_df['색상'].map(lambda x: label_encoders['색상'].inverse_transform([x])[0])

centroids_df

import pandas as pd

# Load the datasets
cat_neutering = pd.read_csv('/content/경상남도 창원시_길고양이 중성화 사업_20220926.csv', encoding='cp949')

# 1. 각 읍면동별 길고양이 포획 수
cat_capture_count = cat_neutering['포획장소'].value_counts()

# 2. 각 읍면동별 중성화된 고양이 수
cat_neutered_count = cat_neutering[cat_neutering['TNR'] == 'O']['포획장소'].value_counts()

# 1. 고양이 색상별 포획 및 중성화 현황
cat_color_capture = cat_neutering['색상'].value_counts()
cat_color_neutered = cat_neutering[cat_neutering['TNR'] == 'O']['색상'].value_counts()

# Combine the data
cat_color_stats = pd.DataFrame({
    'captured': cat_color_capture,
    'neutered': cat_color_neutered
})

cat_color_stats['neutering_rate'] = cat_color_stats['neutered'] / cat_color_stats['captured'] * 100
cat_color_stats = cat_color_stats.sort_values('captured', ascending=False)

cat_color_stats.head(10)

# 2. 성별에 따른 포획 및 중성화 현황
cat_gender_capture = cat_neutering['성별'].value_counts()
cat_gender_neutered = cat_neutering[cat_neutering['TNR'] == 'O']['성별'].value_counts()

# Combine the data
cat_gender_stats = pd.DataFrame({
    'captured': cat_gender_capture,
    'neutered': cat_gender_neutered
})

cat_gender_stats['neutering_rate'] = cat_gender_stats['neutered'] / cat_gender_stats['captured'] * 100

cat_gender_stats

from collections import Counter
import re

# Extract keywords from the capture locations
capture_locations = cat_neutering['포획장소'].tolist()
keywords = []
for location in capture_locations:
    # Use regex to split the location text by spaces and special characters
    keywords.extend(re.split('\s+|,|/|\.|:|;|\(|\)|-|_', location))

# Count the occurrence of each keyword
keyword_counts = Counter(keywords)

# Filter out keywords with less than 5 occurrences
filtered_keyword_counts = {k: v for k, v in keyword_counts.items() if v >= 5}

filtered_keyword_counts

# 필요한 라이브러리 설치
!pip install mlxtend

from mlxtend.frequent_patterns import apriori
from mlxtend.frequent_patterns import association_rules

# 예제: animal_list 데이터를 사용한 연관 규칙 학습
# 이 부분은 데이터의 형태에 따라 다르게 적용될 수 있습니다.

import pandas as pd

# 데이터 불러오기
cat_neutering = pd.read_csv('경상남도 창원시_길고양이 중성화 사업_20220926.csv', encoding="cp949")

df = animal_registration.copy()

# 연관 규칙 학습을 위한 데이터 변환 (One-hot encoding)
df_encoded = pd.get_dummies(df)

cat_neutering['읍면동_only'] = cat_neutering['포획장소'].str.split(' ').str[0]

import pandas as pd
from mlxtend.frequent_patterns import apriori, association_rules


# Series 형태인지 확인하고 DataFrame으로 변환
if isinstance(data, pd.Series):
    data = data.to_frame()

# 결측치 처리
data = data.fillna("Unknown")

# 연속형 변수 제외
categorical_columns = data.select_dtypes(include=['object']).columns
data_categorical = data[categorical_columns]

# 범주형 데이터 변환
data_encoded = pd.get_dummies(data_categorical)

# 연관 규칙 학습을 위한 빈발 항목 집합 찾기
frequent_itemsets = apriori(data_encoded, min_support=0.1, use_colnames=True)

# 연관 규칙 생성
rules = association_rules(frequent_itemsets, metric="lift", min_threshold=1.0)

# 결과 출력
print(rules)

import pandas as pd
from mlxtend.frequent_patterns import apriori, association_rules


# Series 형태인지 확인하고 DataFrame으로 변환
if isinstance(data, pd.Series):
    data = data.to_frame()

# 결측치 처리
data = data.fillna("Unknown")

# 연속형 변수 제외
categorical_columns = data.select_dtypes(include=['object']).columns
data_categorical = data[categorical_columns]

# 범주형 데이터 변환
data_encoded = pd.get_dummies(data_categorical)

# 연관 규칙 학습을 위한 빈발 항목 집합 찾기
frequent_itemsets = apriori(data_encoded, min_support=0.3, use_colnames=True)

# 연관 규칙 생성
rules = association_rules(frequent_itemsets, metric="lift", min_threshold=1.0)

# 결과 출력
print(rules)

data.head()

data=data.drop(labels="축종",axis=1)
data=data.drop(labels="품종",axis=1)

import pandas as pd
from mlxtend.frequent_patterns import apriori, association_rules


# Series 형태인지 확인하고 DataFrame으로 변환
if isinstance(data, pd.Series):
    data = data.to_frame()

# 결측치 처리
data = data.fillna("Unknown")

# 연속형 변수 제외
categorical_columns = data.select_dtypes(include=['object']).columns
data_categorical = data[categorical_columns]

# 범주형 데이터 변환
data_encoded = pd.get_dummies(data_categorical)

# 연관 규칙 학습을 위한 빈발 항목 집합 찾기
frequent_itemsets = apriori(data_encoded, min_support=0.1, use_colnames=True)

# 연관 규칙 생성
rules = association_rules(frequent_itemsets, metric="lift", min_threshold=1.0)

# 결과 출력
print(rules)

